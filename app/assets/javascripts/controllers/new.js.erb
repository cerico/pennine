scenic.controller("NewController", [ '$scope','$location','uiGmapGoogleMapApi','Auth', function($scope,$location,uiGmapGoogleMapApi,Auth) {
   $scope.loading = true;
$(".uploadingspinner").hide()
    $scope.auth = Auth;
    if ($scope.auth.isLoggedIn){
      console.log("yes im logged in")
    }
  $(".picuploaderror").hide();
  uiGmapGoogleMapApi.then(function(maps) {
    $scope.count = 0
    $scope.map = { 
      center: { latitude:53, longitude:-1 }, 
      zoom: 6,
      Markers: [],
      events: {
        click: function (model, event, params) {   

          console.log($scope.map.Markers)
          var marker = {
            latitude: params[0].latLng.lat(),
            longitude: params[0].latLng.lng(),
            id: $scope.count += 1
          }
          
          $scope.lat = params[0].latLng.lat();
          $scope.lng = params[0].latLng.lng();
            //scope apply required because this event handler is outside of the angular domain
            
            $scope.map.Markers.push(marker)
            
            $scope.$apply();
            $scope.map.Markers.splice(0, $scope.map.Markers.length);
            $scope.$apply();

          }
          
        },
        
      }

    });

  


  Dropzone.autoDiscover = false
  $scope.posthere = '/trails.json' 

   Dropzone.options.trailDropzone = { // The camelized version of the ID of the form element
   // configuration
   autoProcessQueue: false,
   uploadMultiple: true,
   parallelUploads: 100,
   maxFiles: 100,
       headers: {
      "X-CSRF-Token" : $('meta[name="csrf-token"]').attr('content')},
   url: '/trails.json',
   
   // The setting up of the dropzone
   init: function() {

     var myDropzone = this;

     Dropzone.isReady = true
     var form = $(this).closest('#trail-dropzone');
     
     // First change the button to actually tell Dropzone to process the queue.
     this.element.querySelector("button[type=submit]").addEventListener("click", function(e) {

       // Make sure that the form isn't actually being sent.
       if (myDropzone.getQueuedFiles().length <1) {
         $(".picuploaderror").show();
       }else{
         $(".picuploaderror").hide();
       }
      
       e.preventDefault();
       e.stopPropagation();
       myDropzone.processQueue();
     });

     // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
     // of the sending event because uploadMultiple is set to true.
     this.on("sendingmultiple", function() {
      console.log("sending")
      $(".uploadingspinner").show()
      
       // Gets triggered when the form is actually being sent.
       // Hide the success button or the complete form.
     });
     this.on("successmultiple", function(files, response) {
       console.log(files)
       console.log(response.id)
       window.location.href = '#trails/' + response.id;
       // Gets triggered when the files have successfully been sent.
       // Redirect user or notify of success.
     });
     this.on("errormultiple", function(files, response) {
      console.log(files)
       // Gets triggered when there was an error sending the files.
       // Maybe show form again, and notify user of error
     });
   }
 }

 Dropzone.isReady = true
  $scope.loading = false;

 console.log(Dropzone.options.trailDropzone)
 Dropzone.options.photoDropzone = new Dropzone("#trail-dropzone", {url: $scope.posthere});








}])